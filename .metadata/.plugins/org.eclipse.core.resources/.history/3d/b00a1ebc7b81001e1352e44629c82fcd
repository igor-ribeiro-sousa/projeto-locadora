package com.pro.services;

import java.time.LocalDate;
import java.time.ZoneId;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.pro.entities.Locacao;
import com.pro.entities.Veiculo;
import com.pro.entities.dtos.LocacaoDTO;
import com.pro.entities.enums.Status;
import com.pro.repositories.LocacaoRepository;
import com.pro.repositories.VeiculoRepository;
import com.pro.services.exceptions.ObjectnotFoundException;

@Service
public class LocacaoService
{

   @Autowired
   private UsuarioService usuarioService;

   @Autowired
   private VeiculoService veiculoService;

   @Autowired
   private VeiculoRepository veiculoRepository;

   @Autowired
   private LocacaoRepository repository;

   public Locacao findById(Integer id)
   {
      Optional<Locacao> obj = repository.findById(id);
      return obj.orElseThrow(() -> new ObjectnotFoundException("Objeto n√£o encontrado! Id: " + id));
   }

   public List<Locacao> findAll()
   {
      return repository.findAll();
   }

   public Locacao inserir(LocacaoDTO objDTO)
   {
      objDTO.setId(null);
      atualizaStatusVeiculo(objDTO);
      Locacao newObj = new Locacao(objDTO);
      return repository.save(newObj);
   }

   private void atualizaStatusVeiculo(LocacaoDTO objDTO)
   {
      Veiculo veiculo = veiculoService.findById(objDTO.getCodigoVeiculo());

      if (!Objects.isNull(veiculo))
      {
         LocalDate dataReserva = objDTO.getDataReserva().toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
         LocalDate dataLocacao = objDTO.getDataLocacao().toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
         LocalDate hoje = LocalDate.now();

         veiculo.addStatus(dataReserva.isEqual(hoje) ? Status.LOCADO : (dataReserva.isEqual(dataLocacao) ? Status.RESERVADO : Status.LOCADO));
    
         veiculoRepository.save(veiculo);
      }
   }

   public Locacao alterar(Integer id, @Valid LocacaoDTO objDTO)
   {
      objDTO.setId(id);
      Locacao oldObj = findById(id);
      oldObj = new Locacao(objDTO);
      return repository.save(oldObj);
   }

   public void delete(Integer id)
   {
      Locacao obj = findById(id);
      Veiculo veiculo = veiculoService.findById(obj.getCodigoVeiculo());
      veiculo.addStatus(Status.DISPONIVEL);
      veiculoRepository.save(veiculo);
      repository.deleteById(id);
   }

}
